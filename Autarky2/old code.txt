local function adjustBiddersBeliefs(summary)

    -- belief ranges are stored as following:
    -- persons[i].beliefRange["sugar"] = {1,10}
    -- beliefRange["sugar"][1] = low belief
    -- beliefRange["sugar"][2] = high belief

    -- bidqty = amount hoped to buy
    -- askqty = amount seller asked to sell
    -- transactionqty = amount actually bought
    -- stockqty = actual inventory
    -- avgprice = the average price for this stock according to persons knowledge

    local buyer = summary.buyer
    local commodity = summary.commodity
    local beliefRange = buyer.beliefRange[commodity]        -- because the commodity is used as an input, this becomes beliefRange = {1,10}
    local highestbelief = buyer.beliefRange[commodity][2]
    local transactionqty = summary.transactionqty
    local bidqty = summary.bidqty or 0
    local askqty = summary.askqty
    local stockqty = summary.currentInventory
    local transactionprice = summary.transactionprice
    local bidprice = summary.bidprice
    local askprice = summary.askprice
    local avgprice = fun.getAvgPrice(buyer.stockHistory[commodity])

    if bidqty == nil then bidqty = 0 end
    if askqty == nil then askqty = 0 end

    -- begin algorithm
    if transactionqty >= (bidqty / 2) then
        -- move range inwards
        local adjustamt = highestbelief * 0.10

        -- print("alpha")
        -- print(commodity, adjustamt)
        -- print(inspect(beliefRange))
        -- print(beliefRange[1])

        beliefRange[1] = beliefRange[1] + adjustamt
        beliefRange[2] = beliefRange[2] - adjustamt
    else
        -- bid not even half satisfied (supply shortage so raise the upper belief range
        local adjustamt = highestbelief * 0.10
        beliefRange[2] = beliefRange[2] + adjustamt
    end

    -- if bid not completely filled and low on inventory then raise the range higher
    if transactionqty < (bidqty / 2) and stockqty <= 3 then     --! the 3 is an arbitrary value
        local adjustamt = math.abs(transactionprice - avgprice)
        beliefRange[1] = beliefRange[1] + adjustamt
        beliefRange[2] = beliefRange[2] + adjustamt
    elseif bidprice > transactionprice then
        -- bid was higher than the transaction price (i.e. trade was successful but paid too much) then move range down
        local adjustamt = (bidprice - transactionprice) * 1.1
        beliefRange[1] = beliefRange[1] - adjustamt
        beliefRange[2] = beliefRange[2] - adjustamt
    elseif askqty > bidqty and bidprice > avgprice then
        local adjustamt = math.abs(askprice - avgprice) * 1.1
        beliefRange[1] = beliefRange[1] - adjustamt
        beliefRange[2] = beliefRange[2] - adjustamt
    elseif bidqty > askqty then
        -- bidqty was not satisfied so move range up
        local adjustamt = (avgprice) * 0.20
        beliefRange[1] = beliefRange[1] + adjustamt
        beliefRange[2] = beliefRange[2] + adjustamt
    else
        local adjustamt = (avgprice) * 0.20
        beliefRange[1] = beliefRange[1] - adjustamt
        beliefRange[2] = beliefRange[2] - adjustamt
    end
    if beliefRange[1] < 0.5 then beliefRange[1] = 0.5 end
    if beliefRange[2] < beliefRange[1] then beliefRange[2] = beliefRange[1] end

    beliefRange[1] = cf.round(beliefRange[1], 1)
    beliefRange[2] = cf.round(beliefRange[2], 1)

    table.insert(buyer.beliefRangeHistory, {beliefRange[1], beliefRange[2]})

    need to check why buyers beliefs go to 0.5 / 0.5 and stay there
end

local function adjustAskersBeliefs(summary)

    -- print("Echo")
    -- print(inspect(summary))

    local transactionqty = summary.transactionqty
    local askqty = summary.askqty
    local seller = summary.seller
    local askprice = summary.askprice
    local transactionprice = summary.transactionprice
    local commodity = summary.commodity
    local beliefRange = seller.beliefRange[commodity]        -- because the commodity is used as an input, this becomes beliefRange = {1,10}

    local weight
    if askqty > 0 then
        weight = 1 - (transactionqty / askqty)
    else
        weight = 1
    end

    local avgprice = fun.getAvgPrice(seller.stockHistory[commodity])
    local displacement = weight * avgprice

    print("Kilo")
    print(avgprice, weight, displacement)

    if transactionqty == 0 then
        local adjustamt = displacement * (1/6)
        print("golf", adjustamt)
        beliefRange[1] = beliefRange[1] - adjustamt
        beliefRange[2] = beliefRange[2] - adjustamt
    elseif weight < 0.75 then
        local adjustamt = displacement * (1/7)
        print("hotel", adjustamt)
        beliefRange[1] = beliefRange[1] - adjustamt
        beliefRange[2] = beliefRange[2] - adjustamt
    elseif askprice < transactionprice then
        local overbid = transactionprice - askprice
        local adjustamt = 1.2 * weight * overbid
        print("indigo", adjustamt)
        beliefRange[1] = beliefRange[1] + adjustamt
        beliefRange[2] = beliefRange[2] + adjustamt
    else
        local adjustamt = (1/5) * avgprice
        print("juliet", adjustamt)
        beliefRange[1] = beliefRange[1] - adjustamt
        beliefRange[2] = beliefRange[2] - adjustamt
    end
    if beliefRange[1] < 0.5 then beliefRange[1] = 0.5 end

    -- print("foxtrot")
    -- print(transactionqty)
    -- print(askqty)
    -- print(seller)
    -- print(askprice)
    -- print(transactionprice)
    -- print(commodity)
    -- print(inspect(beliefRange))

    beliefRange[1] = cf.round(beliefRange[1], 1)
    beliefRange[2] = cf.round(beliefRange[2], 1)

    if beliefRange[2] < beliefRange[1] then beliefRange[2] = beliefRange[1] end

    table.insert(seller.beliefRangeHistory, {beliefRange[1], beliefRange[2]})

    assert(beliefRange[1] > 0)
    assert(beliefRange[2] > 0)

end
